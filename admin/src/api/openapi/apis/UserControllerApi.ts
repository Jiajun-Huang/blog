/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  User,
  UserLoginDto,
  UserRegistorDto,
  UserVo,
} from '../models/index';
import {
    UserFromJSON,
    UserToJSON,
    UserLoginDtoFromJSON,
    UserLoginDtoToJSON,
    UserRegistorDtoFromJSON,
    UserRegistorDtoToJSON,
    UserVoFromJSON,
    UserVoToJSON,
} from '../models/index';

export interface ChangeAvatarRequest {
    avatar: Blob;
}

export interface LoginRequest {
    userLoginDto: UserLoginDto;
}

export interface RegisterRequest {
    userRegistorDto: UserRegistorDto;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async changeAvatarRaw(requestParameters: ChangeAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.avatar === null || requestParameters.avatar === undefined) {
            throw new runtime.RequiredError('avatar','Required parameter requestParameters.avatar was null or undefined when calling changeAvatar.');
        }

        const queryParameters: any = {};

        if (requestParameters.avatar !== undefined) {
            queryParameters['avatar'] = requestParameters.avatar;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/changeAvatar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async changeAvatar(requestParameters: ChangeAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.changeAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async checkLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserVo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/checkLogin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVoFromJSON(jsonValue));
    }

    /**
     */
    async checkLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserVo> {
        const response = await this.checkLoginRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserVo>> {
        if (requestParameters.userLoginDto === null || requestParameters.userLoginDto === undefined) {
            throw new runtime.RequiredError('userLoginDto','Required parameter requestParameters.userLoginDto was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginDtoToJSON(requestParameters.userLoginDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVoFromJSON(jsonValue));
    }

    /**
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserVo> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.logoutRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.userRegistorDto === null || requestParameters.userRegistorDto === undefined) {
            throw new runtime.RequiredError('userRegistorDto','Required parameter requestParameters.userRegistorDto was null or undefined when calling register.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRegistorDtoToJSON(requestParameters.userRegistorDto),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
