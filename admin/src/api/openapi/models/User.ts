/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Blog } from './Blog';
import {
    BlogFromJSON,
    BlogFromJSONTyped,
    BlogToJSON,
} from './Blog';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
} from './Comment';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updateTime?: Date;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof User
     */
    comments?: Array<Comment>;
    /**
     * 
     * @type {Array<Blog>}
     * @memberof User
     */
    blogs?: Array<Blog>;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    admin?: boolean;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'avatar': !exists(json, 'avatar') ? undefined : json['avatar'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createTime': !exists(json, 'createTime') ? undefined : (new Date(json['createTime'])),
        'updateTime': !exists(json, 'updateTime') ? undefined : (new Date(json['updateTime'])),
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'blogs': !exists(json, 'blogs') ? undefined : ((json['blogs'] as Array<any>).map(BlogFromJSON)),
        'admin': !exists(json, 'admin') ? undefined : json['admin'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'nickname': value.nickname,
        'avatar': value.avatar,
        'email': value.email,
        'deleted': value.deleted,
        'createTime': value.createTime === undefined ? undefined : (value.createTime.toISOString()),
        'updateTime': value.updateTime === undefined ? undefined : (value.updateTime.toISOString()),
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CommentToJSON)),
        'blogs': value.blogs === undefined ? undefined : ((value.blogs as Array<any>).map(BlogToJSON)),
        'admin': value.admin,
    };
}

