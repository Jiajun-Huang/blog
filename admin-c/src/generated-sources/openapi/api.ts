/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Blog
 */
export interface Blog {
    /**
     * 
     * @type {number}
     * @memberof Blog
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'uri'?: string;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'coverPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'contentPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'flag'?: string;
    /**
     * 
     * @type {number}
     * @memberof Blog
     */
    'views'?: number;
    /**
     * 
     * @type {number}
     * @memberof Blog
     */
    'likes'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Blog
     */
    'commentable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Blog
     */
    'published'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Blog
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'updateTime'?: string;
    /**
     * 
     * @type {User}
     * @memberof Blog
     */
    'user'?: User;
    /**
     * 
     * @type {Categority}
     * @memberof Blog
     */
    'categority'?: Categority;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Blog
     */
    'tags'?: Array<Tag>;
}
/**
 * 
 * @export
 * @interface BlogDto
 */
export interface BlogDto {
    /**
     * 
     * @type {string}
     * @memberof BlogDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogDto
     */
    'uri'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogDto
     */
    'flag'?: string;
    /**
     * 
     * @type {number}
     * @memberof BlogDto
     */
    'user'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof BlogDto
     */
    'tags'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof BlogDto
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogDto
     */
    'updateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof BlogDto
     */
    'categorie'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BlogDto
     */
    'published'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlogDto
     */
    'commentable'?: boolean;
}
/**
 * 
 * @export
 * @interface BlogVo
 */
export interface BlogVo {
    /**
     * 
     * @type {number}
     * @memberof BlogVo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogVo
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogVo
     */
    'uri'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogVo
     */
    'coverPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogVo
     */
    'contentPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogVo
     */
    'flag'?: string;
    /**
     * 
     * @type {number}
     * @memberof BlogVo
     */
    'views'?: number;
    /**
     * 
     * @type {number}
     * @memberof BlogVo
     */
    'likes'?: number;
    /**
     * 
     * @type {UserVo}
     * @memberof BlogVo
     */
    'user'?: UserVo;
    /**
     * 
     * @type {Array<TagVo>}
     * @memberof BlogVo
     */
    'tags'?: Array<TagVo>;
    /**
     * 
     * @type {string}
     * @memberof BlogVo
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogVo
     */
    'updateTime'?: string;
    /**
     * 
     * @type {CategorityVo}
     * @memberof BlogVo
     */
    'categorie'?: CategorityVo;
    /**
     * 
     * @type {boolean}
     * @memberof BlogVo
     */
    'published'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlogVo
     */
    'commentable'?: boolean;
}
/**
 * 
 * @export
 * @interface Categority
 */
export interface Categority {
    /**
     * 
     * @type {number}
     * @memberof Categority
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Categority
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Blog>}
     * @memberof Categority
     */
    'blogs'?: Array<Blog>;
}
/**
 * 
 * @export
 * @interface CategorityVo
 */
export interface CategorityVo {
    /**
     * 
     * @type {number}
     * @memberof CategorityVo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategorityVo
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'content'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Comment
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'createTime'?: string;
    /**
     * 
     * @type {User}
     * @memberof Comment
     */
    'sendUser'?: User;
    /**
     * 
     * @type {Blog}
     * @memberof Comment
     */
    'blog'?: Blog;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof Comment
     */
    'replyComments'?: Array<Comment>;
    /**
     * 
     * @type {Comment}
     * @memberof Comment
     */
    'replyComment'?: Comment;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Blog>}
     * @memberof Tag
     */
    'blogs'?: Array<Blog>;
}
/**
 * 
 * @export
 * @interface TagVo
 */
export interface TagVo {
    /**
     * 
     * @type {number}
     * @memberof TagVo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TagVo
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updateTime'?: string;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof User
     */
    'comments'?: Array<Comment>;
    /**
     * 
     * @type {Array<Blog>}
     * @memberof User
     */
    'blogs'?: Array<Blog>;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'admin'?: boolean;
}
/**
 * 
 * @export
 * @interface UserLoginDto
 */
export interface UserLoginDto {
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserRegistorDto
 */
export interface UserRegistorDto {
    /**
     * 
     * @type {string}
     * @memberof UserRegistorDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistorDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistorDto
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistorDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistorDto
     */
    'createTime'?: string;
}
/**
 * 
 * @export
 * @interface UserVo
 */
export interface UserVo {
    /**
     * 
     * @type {number}
     * @memberof UserVo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'updateTime'?: string;
}

/**
 * BlogControllerApi - axios parameter creator
 * @export
 */
export const BlogControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlog: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBlog', 'id', id)
            const localVarPath = `/blog/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBlog: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [uri] 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlog: async (uri?: string, id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uri 
         * @param {string} resourcePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogResource: async (uri: string, resourcePath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uri' is not null or undefined
            assertParamExists('getBlogResource', 'uri', uri)
            // verify required parameter 'resourcePath' is not null or undefined
            assertParamExists('getBlogResource', 'resourcePath', resourcePath)
            const localVarPath = `/blog/resource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }

            if (resourcePath !== undefined) {
                localVarQueryParameter['resourcePath'] = resourcePath;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} markdown 
         * @param {BlogDto} blogDto 
         * @param {Array<File>} [images] 
         * @param {File} [cover] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBlog: async (markdown: File, blogDto: BlogDto, images?: Array<File>, cover?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markdown' is not null or undefined
            assertParamExists('uploadBlog', 'markdown', markdown)
            // verify required parameter 'blogDto' is not null or undefined
            assertParamExists('uploadBlog', 'blogDto', blogDto)
            const localVarPath = `/blog/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
            if (markdown !== undefined) { 
                localVarFormParams.append('markdown', markdown as any);
            }
    
            if (cover !== undefined) { 
                localVarFormParams.append('cover', cover as any);
            }
    
            if (blogDto !== undefined) { 
                localVarFormParams.append('blogDto', new Blob([JSON.stringify(blogDto)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogControllerApi - functional programming interface
 * @export
 */
export const BlogControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlog(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlog(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlogControllerApi.deleteBlog']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBlog(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlogVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBlog(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlogControllerApi.getAllBlog']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [uri] 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlog(uri?: string, id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Blog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlog(uri, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlogControllerApi.getBlog']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} uri 
         * @param {string} resourcePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogResource(uri: string, resourcePath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogResource(uri, resourcePath, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlogControllerApi.getBlogResource']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {File} markdown 
         * @param {BlogDto} blogDto 
         * @param {Array<File>} [images] 
         * @param {File} [cover] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBlog(markdown: File, blogDto: BlogDto, images?: Array<File>, cover?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Blog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBlog(markdown, blogDto, images, cover, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlogControllerApi.uploadBlog']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * BlogControllerApi - factory interface
 * @export
 */
export const BlogControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlog(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteBlog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBlog(options?: any): AxiosPromise<Array<BlogVo>> {
            return localVarFp.getAllBlog(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [uri] 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlog(uri?: string, id?: number, options?: any): AxiosPromise<Blog> {
            return localVarFp.getBlog(uri, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uri 
         * @param {string} resourcePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogResource(uri: string, resourcePath: string, options?: any): AxiosPromise<File> {
            return localVarFp.getBlogResource(uri, resourcePath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} markdown 
         * @param {BlogDto} blogDto 
         * @param {Array<File>} [images] 
         * @param {File} [cover] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBlog(markdown: File, blogDto: BlogDto, images?: Array<File>, cover?: File, options?: any): AxiosPromise<Blog> {
            return localVarFp.uploadBlog(markdown, blogDto, images, cover, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogControllerApi - object-oriented interface
 * @export
 * @class BlogControllerApi
 * @extends {BaseAPI}
 */
export class BlogControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogControllerApi
     */
    public deleteBlog(id: number, options?: RawAxiosRequestConfig) {
        return BlogControllerApiFp(this.configuration).deleteBlog(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogControllerApi
     */
    public getAllBlog(options?: RawAxiosRequestConfig) {
        return BlogControllerApiFp(this.configuration).getAllBlog(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [uri] 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogControllerApi
     */
    public getBlog(uri?: string, id?: number, options?: RawAxiosRequestConfig) {
        return BlogControllerApiFp(this.configuration).getBlog(uri, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uri 
     * @param {string} resourcePath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogControllerApi
     */
    public getBlogResource(uri: string, resourcePath: string, options?: RawAxiosRequestConfig) {
        return BlogControllerApiFp(this.configuration).getBlogResource(uri, resourcePath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} markdown 
     * @param {BlogDto} blogDto 
     * @param {Array<File>} [images] 
     * @param {File} [cover] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogControllerApi
     */
    public uploadBlog(markdown: File, blogDto: BlogDto, images?: Array<File>, cover?: File, options?: RawAxiosRequestConfig) {
        return BlogControllerApiFp(this.configuration).uploadBlog(markdown, blogDto, images, cover, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategorityControllerApi - axios parameter creator
 * @export
 */
export const CategorityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete1', 'id', id)
            const localVarPath = `/categority/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categority/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogs1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listBlogs1', 'id', id)
            const localVarPath = `/categority/listblogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('save1', 'name', name)
            const localVarPath = `/categority/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategorityControllerApi - functional programming interface
 * @export
 */
export const CategorityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategorityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategorityControllerApi.delete1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategorityVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategorityControllerApi.list1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBlogs1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlogVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBlogs1(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategorityControllerApi.listBlogs1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save1(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.save1(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategorityControllerApi.save1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CategorityControllerApi - factory interface
 * @export
 */
export const CategorityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategorityControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.delete1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(options?: any): AxiosPromise<Array<CategorityVo>> {
            return localVarFp.list1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogs1(id: number, options?: any): AxiosPromise<Array<BlogVo>> {
            return localVarFp.listBlogs1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1(name: string, options?: any): AxiosPromise<string> {
            return localVarFp.save1(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategorityControllerApi - object-oriented interface
 * @export
 * @class CategorityControllerApi
 * @extends {BaseAPI}
 */
export class CategorityControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorityControllerApi
     */
    public delete1(id: number, options?: RawAxiosRequestConfig) {
        return CategorityControllerApiFp(this.configuration).delete1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorityControllerApi
     */
    public list1(options?: RawAxiosRequestConfig) {
        return CategorityControllerApiFp(this.configuration).list1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorityControllerApi
     */
    public listBlogs1(id: number, options?: RawAxiosRequestConfig) {
        return CategorityControllerApiFp(this.configuration).listBlogs1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorityControllerApi
     */
    public save1(name: string, options?: RawAxiosRequestConfig) {
        return CategorityControllerApiFp(this.configuration).save1(name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileControllerApi - axios parameter creator
 * @export
 */
export const FileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('downloadFile', 'path', path)
            const localVarPath = `/file/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (files: Array<File>, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('uploadFile', 'files', files)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('uploadFile', 'path', path)
            const localVarPath = `/file/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (files) {
                localVarQueryParameter['files'] = files;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileControllerApi - functional programming interface
 * @export
 */
export const FileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(path, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FileControllerApi.downloadFile']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(files: Array<File>, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(files, path, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['FileControllerApi.uploadFile']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * FileControllerApi - factory interface
 * @export
 */
export const FileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(path: string, options?: any): AxiosPromise<File> {
            return localVarFp.downloadFile(path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<File>} files 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(files: Array<File>, path: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.uploadFile(files, path, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileControllerApi - object-oriented interface
 * @export
 * @class FileControllerApi
 * @extends {BaseAPI}
 */
export class FileControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public downloadFile(path: string, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).downloadFile(path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<File>} files 
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileControllerApi
     */
    public uploadFile(files: Array<File>, path: string, options?: RawAxiosRequestConfig) {
        return FileControllerApiFp(this.configuration).uploadFile(files, path, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TagControllerApi - axios parameter creator
 * @export
 */
export const TagControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/tag/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tag/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogs: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listBlogs', 'id', id)
            const localVarPath = `/tag/listblogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('save', 'name', name)
            const localVarPath = `/tag/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagControllerApi - functional programming interface
 * @export
 */
export const TagControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TagControllerApi._delete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TagVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TagControllerApi.list']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBlogs(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlogVo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBlogs(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TagControllerApi.listBlogs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.save(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TagControllerApi.save']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TagControllerApi - factory interface
 * @export
 */
export const TagControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: number, options?: any): AxiosPromise<string> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): AxiosPromise<Array<TagVo>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlogs(id: number, options?: any): AxiosPromise<Array<BlogVo>> {
            return localVarFp.listBlogs(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(name: string, options?: any): AxiosPromise<string> {
            return localVarFp.save(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagControllerApi - object-oriented interface
 * @export
 * @class TagControllerApi
 * @extends {BaseAPI}
 */
export class TagControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public _delete(id: number, options?: RawAxiosRequestConfig) {
        return TagControllerApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public list(options?: RawAxiosRequestConfig) {
        return TagControllerApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public listBlogs(id: number, options?: RawAxiosRequestConfig) {
        return TagControllerApiFp(this.configuration).listBlogs(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public save(name: string, options?: RawAxiosRequestConfig) {
        return TagControllerApiFp(this.configuration).save(name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} avatar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAvatar: async (avatar: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avatar' is not null or undefined
            assertParamExists('changeAvatar', 'avatar', avatar)
            const localVarPath = `/user/changeAvatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (avatar !== undefined) {
                localVarQueryParameter['avatar'] = avatar;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLogin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/checkLogin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLoginDto: UserLoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginDto' is not null or undefined
            assertParamExists('login', 'userLoginDto', userLoginDto)
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegistorDto} userRegistorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userRegistorDto: UserRegistorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegistorDto' is not null or undefined
            assertParamExists('register', 'userRegistorDto', userRegistorDto)
            const localVarPath = `/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegistorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} avatar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAvatar(avatar: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAvatar(avatar, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserControllerApi.changeAvatar']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLogin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkLogin(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserControllerApi.checkLogin']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLoginDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserControllerApi.login']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserControllerApi.logout']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {UserRegistorDto} userRegistorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userRegistorDto: UserRegistorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userRegistorDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserControllerApi.register']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {File} avatar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAvatar(avatar: File, options?: any): AxiosPromise<string> {
            return localVarFp.changeAvatar(avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLogin(options?: any): AxiosPromise<UserVo> {
            return localVarFp.checkLogin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLoginDto: UserLoginDto, options?: any): AxiosPromise<UserVo> {
            return localVarFp.login(userLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<User> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegistorDto} userRegistorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userRegistorDto: UserRegistorDto, options?: any): AxiosPromise<string> {
            return localVarFp.register(userRegistorDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {File} avatar 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public changeAvatar(avatar: File, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).changeAvatar(avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public checkLogin(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).checkLogin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginDto} userLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).login(userLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegistorDto} userRegistorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public register(userRegistorDto: UserRegistorDto, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).register(userRegistorDto, options).then((request) => request(this.axios, this.basePath));
    }
}



