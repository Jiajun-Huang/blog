/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Blog,
  BlogDto,
  BlogVo,
} from '../models/index';
import {
    BlogFromJSON,
    BlogToJSON,
    BlogDtoFromJSON,
    BlogDtoToJSON,
    BlogVoFromJSON,
    BlogVoToJSON,
} from '../models/index';

export interface DeleteBlogRequest {
    id: number;
}

export interface GetBlogRequest {
    uri?: string;
    id?: number;
}

export interface GetBlogResourceRequest {
    uri: string;
    resourcePath: string;
}

export interface UploadBlogRequest {
    markdown: Blob;
    blogDto: BlogDto;
    images?: Array<Blob>;
    cover?: Blob;
}

/**
 * 
 */
export class BlogControllerApi extends runtime.BaseAPI {

    /**
     */
    async deleteBlogRaw(requestParameters: DeleteBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBlog.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteBlog(requestParameters: DeleteBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteBlogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllBlogRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogVo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogVoFromJSON));
    }

    /**
     */
    async getAllBlog(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogVo>> {
        const response = await this.getAllBlogRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlogRaw(requestParameters: GetBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogVo>> {
        const queryParameters: any = {};

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogVoFromJSON(jsonValue));
    }

    /**
     */
    async getBlog(requestParameters: GetBlogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogVo> {
        const response = await this.getBlogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlogResourceRaw(requestParameters: GetBlogResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.uri === null || requestParameters.uri === undefined) {
            throw new runtime.RequiredError('uri','Required parameter requestParameters.uri was null or undefined when calling getBlogResource.');
        }

        if (requestParameters.resourcePath === null || requestParameters.resourcePath === undefined) {
            throw new runtime.RequiredError('resourcePath','Required parameter requestParameters.resourcePath was null or undefined when calling getBlogResource.');
        }

        const queryParameters: any = {};

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        if (requestParameters.resourcePath !== undefined) {
            queryParameters['resourcePath'] = requestParameters.resourcePath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blog/resource`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getBlogResource(requestParameters: GetBlogResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getBlogResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadBlogRaw(requestParameters: UploadBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blog>> {
        if (requestParameters.markdown === null || requestParameters.markdown === undefined) {
            throw new runtime.RequiredError('markdown','Required parameter requestParameters.markdown was null or undefined when calling uploadBlog.');
        }

        if (requestParameters.blogDto === null || requestParameters.blogDto === undefined) {
            throw new runtime.RequiredError('blogDto','Required parameter requestParameters.blogDto was null or undefined when calling uploadBlog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.images) {
            requestParameters.images.forEach((element) => {
                formParams.append('images', element as any);
            })
        }

        if (requestParameters.markdown !== undefined) {
            formParams.append('markdown', requestParameters.markdown as any);
        }

        if (requestParameters.cover !== undefined) {
            formParams.append('cover', requestParameters.cover as any);
        }

        if (requestParameters.blogDto !== undefined) {
            formParams.append('blogDto', new Blob([JSON.stringify(BlogDtoToJSON(requestParameters.blogDto))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/blog/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogFromJSON(jsonValue));
    }

    /**
     */
    async uploadBlog(requestParameters: UploadBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blog> {
        const response = await this.uploadBlogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
